{"version":3,"sources":["components/AddCategory.tsx","components/GifGridItem.tsx","helpers/getGifs.ts","components/GifGrid.tsx","hooks/useFetchGifs.tsx","components/GifexpertApp.tsx","reportWebVitals.ts","index.tsx"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","Element","console","error","type","value","onChange","target","GifGridItem","url","title","id","className","src","alt","getGifs","category","a","encodeURI","fetch","result","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","GifexpertApp","categories","categori","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qLAEaA,EAAc,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,cAC7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACC,sBAAMC,SATc,SAACC,GACrBA,EAAEC,iBACFJ,EAAWK,OAAOC,OAAS,EACxBR,GAAc,SAACS,GAAD,OAAmBP,GAAnB,mBAAkCO,OAChDC,QAAQC,MAAM,iBACjBR,EAAc,KAId,SACC,uBAAOS,KAAK,OAAOC,MAAOX,EAAYY,SAdd,SAAC,GAAgC,IAAD,IAA7BC,OAAUF,MACtCV,OADyD,MAAX,GAAW,S,QCO5Ca,EATK,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,MAAqB,EAAdC,GAClC,OACC,sBAAKC,UAAU,yCAAf,UACC,qBAAKC,IAAKJ,EAAKK,IAAKJ,IACpB,4BAAIA,Q,uBCLMK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACV,mCACNR,EAFgB,iDAEgCS,UACrDF,GAHqB,4BACV,oCADU,SAKDG,MAAMV,GALL,cAKhBW,EALgB,gBAMCA,EAAOC,OANR,uBAMdC,EANc,EAMdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACtB,MAAO,CACNd,GAAIc,EAAId,GACRD,MAAOe,EAAIf,MACXD,IAAKgB,EAAIC,OAAOC,iBAAiBlB,QAXb,kBAcfc,GAde,4CAAH,sDCuBLK,EAlBC,SAAC,GAAyB,IAAvBZ,EAAsB,EAAtBA,SAClB,ECN2B,SAACA,GAC5B,MAA0BvB,mBAAc,CACvC6B,KAAM,CAAC,IACPO,SAAS,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACTjB,EAAQC,GAAUiB,MAAK,SAACX,GAAD,OACtBS,EAAS,CACRT,OACAO,SAAS,SAGT,CAACb,IAEGc,EDT2BI,CAAalB,GAAjCU,EAAd,EAAQJ,KAAcO,EAAtB,EAAsBA,QAEtB,OACC,qCACC,oBAAIjB,UAAU,oCAAd,SAAmDI,IAClDa,GAAW,mBAAGjB,UAAU,mCAAb,qBAEX,qBAAKA,UAAU,YAAf,SACEc,EAAOF,KAAI,SAACW,GAAD,OACX,cAAC,EAAD,eAAgCA,GAAdA,EAAMxB,aEbjByB,EAAe,WAC3B,MAAoC3C,mBAAS,CAAC,aAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KACA,OACC,qCACC,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACC6C,EAAWb,KAAI,SAACc,GAAD,OACf,cAAC,EAAD,CAAwBtB,SAAUsB,GAApBA,UCEHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCFdO,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK1DX,M","file":"static/js/main.3322a01a.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nexport const AddCategory = ({ setCategories }: any) => {\n\tconst [inputValue, setInputValue] = useState('');\n\n\tconst handleInputchange = ({ target: { value = '' } }) => {\n\t\tsetInputValue(value);\n\t};\n\n\tconst handleSubmit = (e: any) => {\n\t\te.preventDefault();\n\t\tinputValue.trim().length > 2\n\t\t\t? setCategories((Element: any) => [inputValue, ...Element])\n\t\t\t: console.error('Input Invalid');\n\t\tsetInputValue('');\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input type='text' value={inputValue} onChange={handleInputchange} />\n\t\t</form>\n\t);\n};\n","import React from 'react';\nimport { Img } from '../interfaces/Img';\n\nconst GifGridItem = ({ url, title, id }: Img) => {\n\treturn (\n\t\t<div className='card animate__animated animate__fadeIn'>\n\t\t\t<img src={url} alt={title} />\n\t\t\t<p>{title}</p>\n\t\t</div>\n\t);\n};\n\nexport default GifGridItem;\n","import { Img } from '../interfaces/Img';\n\nexport const getGifs = async (category: string) => {\n\tconst KEY = 'o8kYfXLa5w6pUEOppSXtKuxnU2YWGiT1';\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n\t\tcategory\n\t)}&limit=5&api_key=${KEY}`;\n\tconst result = await fetch(url);\n\tconst { data } = await result.json();\n\tconst gifs = data.map((img: any): Img => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images.downsized_medium.url,\n\t\t};\n\t});\n\treturn gifs;\n};\n","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { Img } from '../interfaces/Img';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\ninterface Props {\n\tcategory: string;\n}\nconst GifGrid = ({ category }: Props) => {\n\tconst { data: images, loading } = useFetchGifs(category);\n\n\treturn (\n\t\t<>\n\t\t\t<h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\t\t\t{loading && <p className='animate__animated animate__flash'>Loading</p>}\n\t\t\t{\n\t\t\t\t<div className='card-grid'>\n\t\t\t\t\t{images.map((image: Img) => (\n\t\t\t\t\t\t<GifGridItem key={image.id} {...image} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t}\n\t\t</>\n\t);\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\nexport const useFetchGifs = (category: string) => {\n\tconst [state, setState] = useState<any>({\n\t\tdata: [''],\n\t\tloading: true,\n\t});\n\n\tuseEffect(() => {\n\t\tgetGifs(category).then((data) =>\n\t\t\tsetState({\n\t\t\t\tdata,\n\t\t\t\tloading: false,\n\t\t\t})\n\t\t);\n\t}, [category]);\n\n\treturn state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './AddCategory';\nimport GifGrid from './GifGrid';\n\nexport const GifexpertApp = () => {\n\tconst [categories, setCategories] = useState(['React.js']);\n\treturn (\n\t\t<>\n\t\t\t<h1>Gif Expert App</h1>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t<hr />\n\t\t\t{categories.map((categori) => (\n\t\t\t\t<GifGrid key={categori} category={categori} />\n\t\t\t))}\n\t\t</>\n\t);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport { GifexpertApp } from './components/GifexpertApp';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport 'animate.css';\n/* const Key = 'o8kYfXLa5w6pUEOppSXtKuxnU2YWGiT1';\n */\nReactDOM.render(<GifexpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}